from datetime import datetime

from models import Users, Interests, UsersInterest, BlackList, Favorites, Photos, Matches
from sqlalchemy import create_engine, distinct
from dotenv import load_dotenv
from sqlalchemy.orm import declarative_base, sessionmaker, relationship
from sqlalchemy.types import Enum as SQLEnum
import os
from bot import VKinderBot as VKBot


from random import randrange
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
load_dotenv()
Base = declarative_base()
engine = create_engine(os.getenv('DB_URL'))
SessionLocal = sessionmaker(bind=engine)
session = SessionLocal()

def get_user(user_id: int) -> Users:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –û–±—ä–µ–∫—Ç Users
    """
    try:
        user = session.query(Users).filter_by(id_VK_user=user_id).first()
        return user
    except Exception as e:
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î"

def create_new_user(user_id: int, name: str = None, surname: str = None,
                    age: int = None, gender: str = None, city: str = None):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param name: –∏–º—è
    :param surname: —Ñ–∞–º–∏–ª–∏—è
    :param age: –≤–æ–∑—Ä–∞—Å—Ç
    :param gender: –ø–æ–ª
    :param city: –≥–æ—Ä–æ–¥
    :return:
    """
    try:
        new_user = Users(id_VK_user=user_id, name=name, surname=surname, age=age,
                         gender=gender, city=city)
        session.add(new_user)
        session.commit()
    except Exception as e:
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"

def get_favorites(user_id: int):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
    :return:
    """
    try:
        users = session.query(Favorites.id_target).filter_by(id_VK_user=user_id).all()
        if users:
            return users
        return "üìã –í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç"
    except Exception as e:
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î"

def add_favorite(user_id: int, target_id: int):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param target_id: ID –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return:
    """
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
    try:
        if target_id in get_favorites(user_id):
            return "‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!"
        # –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
        user = get_user(target_id)
        if not user:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –í–ö
            user = VKBot.get_user_info(target_id)
            create_new_user(user['id'], user['first_name'], user['last_name'],
                            user['age'], user['sex'], user['city'])
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ
        new_favorite = Favorites(id_VK_user=user_id, id_target=target_id)
        session.add(new_favorite)
        session.commit()
        return "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!"
    except Exception as e:
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤ –ë–î"

def get_blacklist(user_id: int):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
    :return:
    """
    try:
        users = session.query(BlackList.id_blocked).filter_by(id_VK_user=user_id).all()
        if users:
            return users
        return "üìã –í–∞—à —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
    except Exception as e:
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–∑ –ë–î"

def add_blacklist(user_id: int, blocked_id: int):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param target_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    :return:
    """
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
    try:
        if blocked_id in get_blacklist(user_id):
            return "‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!"
        # –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
        user = get_user(blocked_id)
        if not user:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = VKBot.get_user_info(blocked_id)
            create_new_user(user['id'], user['first_name'], user['last_name'],
                            user['age'], user['sex'], user['city'])
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ
        new_black_user = BlackList(id_VK_user=user_id, id_blocked=blocked_id)
        session.add(new_black_user)
        session.commit()
        return "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫!"
    except Exception as e:
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –ë–î"

def get_photo(user_id: int, count: int = 3):
    """
    –≤—ã–∑–æ–≤ —Ñ–æ—Ç–æ –∏–∑ –ë–î
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    :return:
    """
    try:
        photos = session.query(Photos.url).filter_by(id_VK_user=user_id).order_by(Photos.likes).limit(count).all()
        return photos
    except Exception as e:
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –∏–∑ –ë–î"

def add_photo(user_id: int, url: str, likes: int, is_profile_photo: bool):
    """
    —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤ –ë–î
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param url: url —Ñ–æ—Ç–æ
    :param likes: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤
    :param is_profile_photo: —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
    :return:
    """
    try:
        new_photo = Photos(id_VK_user=user_id, url=url, likes=likes, is_profile_photo=is_profile_photo)
        session.add(new_photo)
        session.commit()
    except Exception as e:
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –≤ –ë–î"

def get_match(user_id: int):
    """
    –≤—ã–∑–æ–≤ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏–∑ –ë–î
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return:
    """
    try:
        match = session.query(Matches).filter(Matches.id_VK_user == user_id, Matches.match_shown == False).first()
        if match:
            match.match_shown = True
            session.commit()
            return match
        return 'üòî –ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å.'
    except Exception as e:
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∏–∑ –ë–î"

def add_match(user_id: int, target_id: int, matched_at: datetime = None, match_shown: bool = False):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –ë–î
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param target_id: ID —Å–æ–≤–ø–∞–¥–∞—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param matched_at: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    :param match_shown: –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏
    :return:
    """
    try:
        if not matched_at:
            matched_at = datetime.now()
        new_match = Matches(id_VK_user=user_id, id_target_user=target_id, matched_at=matched_at)
        session.add(new_match)
        session.commit()
    except Exception as e:
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –ë–î"

def write_msg(user_id, message):
    vk.method('messages.send', {'user_id': user_id, 'message': message,  'random_id': randrange(10 ** 7),})


if __name__ == '__main__':
    TOKEN = os.getenv('VK_GROUP_TOKEN')
    vk = vk_api.VkApi(token=TOKEN)
    longpoll = VkLongPoll(vk)

    for event in longpoll.listen():
        if event.type == VkEventType.MESSAGE_NEW:

            if event.to_me:
                request = event.text
                user = get_user(event.user_id)
                if not user:
                    create_new_user(event.user_id)

                    write_msg(event.user_id, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {event.user_id}, –≤ –±–æ—Ç–µ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
                    print(f'–í –ë–î –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {event.user_id}')
                elif request == "–ø—Ä–∏–≤–µ—Ç":
                    write_msg(event.user_id, f"–•–∞–π, {event.user_id}")
                elif request == "–ø–æ–∫–∞":
                    write_msg(event.user_id, "–ü–æ–∫–∞((")
                else:
                    write_msg(event.user_id, "–ù–µ –ø–æ–Ω—è–ª–∞ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞...")