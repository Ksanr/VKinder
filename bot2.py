import os
from pyexpat.errors import messages

import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.utils import get_random_id
from dotenv import load_dotenv
import requests
import json
from typing import List, Dict, Optional
import logging
from query import SessionLocal, get_user, create_new_user, update_user, get_favorites, add_favorite, get_blacklist, \
    add_blacklist, get_photo, add_photo, get_match, add_match, get_interest, add_interest, get_user_interest, \
    add_user_interest, find_match, get_user_full_info
from models import Gender

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


class VKinderBot:
    """
    –ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤
    
    –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
    - –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º (–≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, –≥–æ—Ä–æ–¥)
    - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–æ—Ñ–∏–ª—è
    - –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    - –°–∏—Å—Ç–µ–º–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    """

    def __init__(self, group_token: str, user_token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        
        Args:
            group_token: –¢–æ–∫–µ–Ω –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            user_token: –¢–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π
        """
        self.group_token = group_token
        self.user_token = user_token

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –¥–ª—è –≥—Ä—É–ø–ø—ã (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π)
        self.vk_group = vk_api.VkApi(token=group_token)
        self.longpoll = VkLongPoll(self.vk_group)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–∏—Å–∫ –ª—é–¥–µ–π)
        self.vk_user = vk_api.VkApi(token=user_token)

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
        self.user_sessions = {}

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        session = SessionLocal()
        # self.db = DatabaseManager()

        logger.info("VKinder Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def create_keyboard(self, buttons: List[Dict[str, str]]) -> dict:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        
        Args:
            buttons: –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ [{'text': '–¢–µ–∫—Å—Ç', 'color': 'color', 'payload': 'payload'}]
            
        Returns:
            JSON —Å—Ç—Ä–æ–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        """
        keyboard = VkKeyboard(one_time=True)

        for i, button in enumerate(buttons):
            if i > 0 and i % 2 == 0:  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–∞–∂–¥—ã–µ 2 –∫–Ω–æ–ø–∫–∏
                keyboard.add_line()

            color = getattr(VkKeyboardColor, button.get('color', 'PRIMARY'))
            keyboard.add_button(
                button['text'],
                color=color,
                payload=json.dumps(button.get('payload', button['text']))
            )

        return keyboard.get_keyboard()

    def get_user_info(self, user_id: int) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        """
        try:
            user_info = self.vk_group.method('users.get', {
                'user_ids': user_id,
                'fields': 'city,age,sex,bdate'
            })[0]

            return {
                'id': user_info.get('id', 0),
                'first_name': user_info.get('first_name', '–°–∫—Ä—ã—Ç–æ'),
                'last_name': user_info.get('last_name', '–°–∫—Ä—ã—Ç–æ'),
                'city': user_info.get('city', {'id': 1, 'title': '–ú–æ—Å–∫–≤–∞'}),
                'age': self._calculate_age(user_info.get('bdate', '')),
                'sex': user_info.get('sex', 0)
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
            return

    def _calculate_age(self, bdate: str) -> int:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è
        
        Args:
            bdate: –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY
            
        Returns:
            –í–æ–∑—Ä–∞—Å—Ç –≤ –≥–æ–¥–∞—Ö
        """
        if not bdate or bdate.count('.') < 2:
            return 0

        try:
            from datetime import datetime
            birth_date = datetime.strptime(bdate, '%d.%m.%Y')
            today = datetime.now()
            return today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))
        except:
            return 0

    def search_users(self, city_id: int, age_from: int, age_to: int, sex: int, count: int = 20) -> List[Dict]:
        """
        –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        
        Args:
            city_id: ID –≥–æ—Ä–æ–¥–∞
            age_from: –í–æ–∑—Ä–∞—Å—Ç –æ—Ç
            age_to: –í–æ–∑—Ä–∞—Å—Ç –¥–æ
            sex: –ü–æ–ª (1 - –∂–µ–Ω—Å–∫–∏–π, 2 - –º—É–∂—Å–∫–æ–π)
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        try:
            results = self.vk_user.method('users.search', {
                'city': city_id,
                'age_from': age_from,
                'age_to': age_to,
                'sex': sex,
                'status': 6,  # –í –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ
                'count': count,
                'fields': 'city,age,sex,bdate'
            })

            users = []
            for user in results['items']:
                if not user.get('is_closed', False):  # –¢–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
                    users.append({
                        'id': user['id'],
                        'first_name': user['first_name'],
                        'last_name': user['last_name'],
                        'city': user.get('city', {'id': 1, 'title': '–ú–æ—Å–∫–≤–∞'}),
                        'age': self._calculate_age(user.get('bdate', '')),
                        'profile_url': f"https://vk.com/id{user['id']}"
                    })

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
            return users

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

    def get_popular_photos(self, user_id: int, count: int = 3) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        """
        try:
            photos = self.vk_user.method('photos.get', {
                'owner_id': user_id,
                'album_id': 'profile',
                'extended': 1,
                'count': 200  # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            })

            if not photos['items']:
                return []

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–∞–π–∫–æ–≤
            sorted_photos = sorted(
                photos['items'],
                key=lambda x: x.get('likes', {}).get('count', 0),
                reverse=True
            )

            popular_photos = []
            for photo in sorted_photos[:count]:
                # –ü–æ–ª—É—á–∞–µ–º URL –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                sizes = photo.get('sizes', [])
                if sizes:
                    max_size = max(sizes, key=lambda x: x['width'] * x['height'])
                    popular_photos.append({
                        'id': photo['id'],
                        'owner_id': photo['owner_id'],
                        'url': max_size['url'],
                        'likes': photo.get('likes', {}).get('count', 0),
                        'attachment': f"photo{photo['owner_id']}_{photo['id']}"
                    })

            return popular_photos

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []

    def send_user_profile(self, user_id: int, user_profile: Dict, photos: List[Dict]):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_profile: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            photos: –°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"üë§ {user_profile.name} {user_profile.surname}\n"
            message += f"üìç {user_profile.city.city_name}\n"
            if user_profile.age:
                message += f"üéÇ {user_profile.age} –ª–µ—Ç\n"

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard_buttons = [
                {'text': '‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', 'color': 'POSITIVE', 'payload': 'add_favorite'},
                {'text': 'üôà –í –ß–°', 'color': 'NEGATIVE', 'payload': 'add_blacklist'},
                {'text': '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π', 'color': 'PRIMARY', 'payload': 'next_user'},
                {'text': 'üìã –ò–∑–±—Ä–∞–Ω–Ω–æ–µ', 'color': 'SECONDARY', 'payload': 'show_favorites'},
                {'text': 'üîï –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫', 'color': 'SECONDARY', 'payload': 'show_blacklist'},
                {'text': 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', 'color': 'SECONDARY', 'payload': 'new_search'}
            ]

            keyboard = self.create_keyboard(keyboard_buttons)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–ª–æ–∂–µ–Ω–∏—è (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏)
            attachments = []
            for photo in photos:
                attachments.append(photo.attachment)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.vk_group.method('messages.send', {
                'user_id': user_id,
                'message': message,
                'keyboard': keyboard,
                'attachment': ','.join(attachments) if attachments else None,
                'random_id': get_random_id()
            })

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")

    def add_to_favorites(self, user_id: int, target_user: dict):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
            target_user: –ü—Ä–æ—Ñ–∏–ª—å –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            message = add_favorite(user_id, target_user.id_VK_user)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard_buttons = [
                {'text': '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π', 'color': 'PRIMARY', 'payload': 'next_user'},
                {'text': 'üìã –ò–∑–±—Ä–∞–Ω–Ω–æ–µ', 'color': 'SECONDARY', 'payload': 'show_favorites'},
                {'text': 'üîï –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫', 'color': 'SECONDARY', 'payload': 'show_blacklist'},
                {'text': 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', 'color': 'SECONDARY', 'payload': 'new_search'}
            ]

            keyboard = self.create_keyboard(keyboard_buttons)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.vk_group.method('messages.send', {
                'user_id': user_id,
                'message': message,
                'keyboard': keyboard,
                'random_id': get_random_id()
            })

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")

    def show_favorites(self, user_id: int):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
        """
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –ë–î
            favorites = get_favorites(user_id)

            if isinstance(favorites, str):
                message = "üìã –í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç"
            else:
                message = "üìã –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
                for i, fav in enumerate(favorites, 1):
                    cur_fav = get_user(fav[0])
                    message += f"{i}. {cur_fav.name} {cur_fav.surname}\n"
                    message += f"   https://vk.com/id{cur_fav.id_VK_user}\n\n"

            keyboard_buttons = [
                {'text': 'üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫', 'color': 'POSITIVE', 'payload': 'start_search'},
                {'text': '‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ', 'color': 'SECONDARY', 'payload': 'show_favorites'},
                {'text': 'üîï –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫', 'color': 'SECONDARY', 'payload': 'show_blacklist'}
            ]

            keyboard = self.create_keyboard(keyboard_buttons)

            self.send_message(user_id, message, keyboard)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")

    def add_to_blacklist(self, user_id: int, target_user: dict):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ß–°

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
            target_user: –ü—Ä–æ—Ñ–∏–ª—å –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            message = add_blacklist(user_id, target_user.id_VK_user)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard_buttons = [
                {'text': '‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π', 'color': 'PRIMARY', 'payload': 'next_user'},
                {'text': 'üìã –ò–∑–±—Ä–∞–Ω–Ω–æ–µ', 'color': 'SECONDARY', 'payload': 'show_favorites'},
                {'text': 'üîï –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫', 'color': 'SECONDARY', 'payload': 'show_blacklist'},
                {'text': 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', 'color': 'SECONDARY', 'payload': 'new_search'}
            ]

            keyboard = self.create_keyboard(keyboard_buttons)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.vk_group.method('messages.send', {
                'user_id': user_id,
                'message': message,
                'keyboard': keyboard,
                'random_id': get_random_id()
            })

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")

    def show_blacklist(self, user_id: int):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ß–°

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
        """
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –ë–î
            blacklist = get_blacklist(user_id)

            if isinstance(blacklist, str):
                message = "üìã –í–∞—à —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
            else:
                message = "üìã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ:\n\n"
                for i, fav in enumerate(blacklist, 1):
                    cur_fav = get_user(fav[0])
                    message += f"{i}. {cur_fav.name} {cur_fav.surname}\n"
                    message += f"   https://vk.com/id{cur_fav.id_VK_user}\n\n"

            keyboard_buttons = [
                {'text': 'üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫', 'color': 'POSITIVE', 'payload': 'start_search'},
                {'text': '‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ', 'color': 'SECONDARY', 'payload': 'show_favorites'},
                {'text': 'üîï –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫', 'color': 'SECONDARY', 'payload': 'show_blacklist'}
            ]

            keyboard = self.create_keyboard(keyboard_buttons)

            self.send_message(user_id, message, keyboard)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")

    def send_message(self, user_id: int, message: str, keyboard: str = None):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            keyboard: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (JSON)
        """
        try:
            params = {
                'user_id': user_id,
                'message': message,
                'random_id': get_random_id()
            }

            if keyboard:
                params['keyboard'] = keyboard

            self.vk_group.method('messages.send', params)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def start_search(self, user_id: int):
        """
        –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = self.get_user_info(user_id)
            if not user_info:
                self.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ")
                return

            # –ø–æ–∏—Å–∫ –ø–æ –ë–î —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
            found_users = find_match(user_id)

            if isinstance(found_users, str):
                self.send_message(user_id, found_users)
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.show_next_user(user_id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞: {e}")
            self.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def show_next_user(self, user_id: int):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
        """
        try:
            match = get_match(user_id)
            if isinstance(match, str):
                keyboard_buttons = [
                    {'text': 'üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫', 'color': 'POSITIVE', 'payload': 'start_search'},
                    {'text': '‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ', 'color': 'SECONDARY', 'payload': 'show_favorites'},
                    {'text': 'üîï –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫', 'color': 'SECONDARY', 'payload': 'show_blacklist'}
                ]

                keyboard = self.create_keyboard(keyboard_buttons)
                self.send_message(user_id, match, keyboard)
                return

            current_user = get_user(match.id_target_user)
            photos = get_photo(match.id_target_user)
            self.user_sessions[user_id] = {
                'current_user': current_user
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            self.send_user_profile(user_id, current_user, photos)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    def handle_message(self, event):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ VK LongPoll
        """
        try:
            user_id = event.user_id
            message = event.text.lower()

            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            user = get_user(user_id)
            if not user:
                user_VK = self.get_user_info(user_id)

                create_new_user(user_id, user_VK['first_name'], user_VK['last_name'], user_VK['age'],
                                (0, Gender.VALUE_TWO, Gender.VALUE_ONE)[user_VK['sex']], user_VK['city'])

                photos = self.get_popular_photos(user_id)
                for photo in photos:
                    add_photo(user_id, photo['url'], photo['likes'], photo['attachment'], False)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if message == '/start' or message == '–Ω–∞—á–∞—Ç—å':
                welcome_message = """
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VKinder!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ª—é–¥–µ–π –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫
‚Ä¢ /favorites - –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
‚Ä¢ /help - –ü–æ–º–æ—â—å

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫!
                """

                keyboard_buttons = [
                    {'text': 'üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫', 'color': 'POSITIVE', 'payload': 'start_search'},
                    {'text': '‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ', 'color': 'SECONDARY', 'payload': 'show_favorites'},
                    {'text': 'üîï –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫', 'color': 'SECONDARY', 'payload': 'show_blacklist'}
                ]

                keyboard = self.create_keyboard(keyboard_buttons)
                self.send_message(user_id, welcome_message, keyboard)

            elif message == '/favorites':
                self.show_favorites(user_id)

            elif message == '/blacklist':
                self.show_blacklist(user_id)

            elif message == '/help':
                help_message = """
ü§ñ –ü–æ–º–æ—â—å –ø–æ VKinder Bot

üìã –ö–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ /favorites - –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üîò –ö–Ω–æ–ø–∫–∏:
‚Ä¢ üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ - –ù–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö –ª—é–¥–µ–π
‚Ä¢ ‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ ‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ - –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
‚Ä¢ üôàÔ∏è –í –ß–° - –î–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
‚Ä¢ üìã –ò–∑–±—Ä–∞–Ω–Ω–æ–µ - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö

‚ùó –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–π –ø—Ä–æ—Ñ–∏–ª—å –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.
                """
                self.send_message(user_id, help_message)

            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
                self.send_message(user_id, "‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def handle_button_click(self, event):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ VK LongPoll
        """
        try:
            user_id = event.user_id
            payload = json.loads(event.payload)

            if payload == 'start_search':
                self.start_search(user_id)

            elif payload == 'next_user':
                self.show_next_user(user_id)

            elif payload == 'add_favorite':
                user_session = self.user_sessions.get(user_id)
                if user_session and 'current_user' in user_session:
                    self.add_to_favorites(user_id, user_session['current_user'])
                else:
                    self.send_message(user_id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")

            elif payload == 'add_blacklist':
                user_session = self.user_sessions.get(user_id)
                if user_session and 'current_user' in user_session:
                    self.add_to_blacklist(user_id, user_session['current_user'])
                else:
                    self.send_message(user_id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")

            elif payload == 'show_favorites':
                self.show_favorites(user_id)

            elif payload == 'show_blacklist':
                self.show_blacklist(user_id)

            elif payload == 'new_search':
                self.start_search(user_id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: {e}")

    def run(self):
        """
        –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        """
        logger.info("–ó–∞–ø—É—Å–∫ VKinder Bot...")

        try:
            for event in self.longpoll.listen():
                if event.type == VkEventType.MESSAGE_NEW and event.to_me:
                    if hasattr(event, 'payload'):
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
                        self.handle_button_click(event)
                    else:
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                        self.handle_message(event)

        except KeyboardInterrupt:
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    GROUP_TOKEN = os.getenv('VK_GROUP_TOKEN')
    USER_TOKEN = os.getenv('VK_USER_TOKEN')

    if not GROUP_TOKEN or not USER_TOKEN:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–∫–µ–Ω—ã VK. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è VK_GROUP_TOKEN –∏ VK_USER_TOKEN")
        return

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = VKinderBot(GROUP_TOKEN, USER_TOKEN)
    bot.run()


if __name__ == "__main__":
    main()
